{"componentChunkName":"component---src-templates-blog-post-js","path":"/docker/2022-07-09_이미지와컨테이너/","result":{"data":{"site":{"siteMetadata":{"title":""}},"markdownRemark":{"id":"d21a39f0-95f6-5492-9ddb-da1043b6f560","excerpt":"1. DOCKER 기본 이해 DOCKER…","html":"<h1>1. DOCKER 기본 이해</h1>\n<h2>DOCKER</h2>\n<p>: 다양한 운영체제와 시스템 환경 상에서, 서버 셋업을 위한 작업이 다르고 복잡하다.</p>\n<p>: 도커는 <strong>컨테이너 기반의 가상화 플랫폼</strong>으로, 컨테이너 상에 서버를 셋업해놓을 수 있다.</p>\n<p>: 기반 환경이 다르더라도, 언제든 컨테이너 실행하면 동일한 서버 셋업이 가능하다.</p>\n<h3>Docker Internals</h3>\n<p>: Docker는 리눅스 컨테이너부터 시작된 기술이다.</p>\n<h3>LXC(Linux Container)</h3>\n<ul>\n<li>단일 컴퓨팅 시스템에 설치된 리눅스 운영체제 상에서, 다른 영역과 분리된 별도의 리눅스 시스템을 운영할 수 있는 리눅스 커널 기술</li>\n<li>리눅스 운영체제 레벨에서 영역과 자원 할당(CPU, 메모리, 네트워크) 등을 분리하여, 마치 별도의 시스템처럼 사용할 수 있는 기술</li>\n<li>docker는 리눅스 커널에 LXC 기술을 사용해\n→ 분리된 공간인 리눅스 컨테이너를 만들고\n→ 리눅스 컨테이너 상에 별도로 구성된 파일 시스템에 시스템 설정 및 응용 프로그램을 실행할 수 있도록 하는 기술을 정의한 것이라고 이해하면 된다.\n→ <strong>최근에는 별도의 컨테이너 기술</strong>을 구현해 사용한다.</li>\n</ul>\n<h2>Docker 주요 구성 요소</h2>\n<h3>1. docker Engine</h3>\n<ul>\n<li>docker는 서버/클라이언트 구조로 이루어져 있다.</li>\n<li>서버는 데몬프로세스 형태로 동작한다. (데몬이란 계속 실행 중인 시스템 = 계속 떠있다)</li>\n<li>docker command는 일종의 클라이언트라고 이해하면 좋다.</li>\n<li>docker command를 내리면 내부적으로 REST API를 사용해 docker daemon process 를 호출하는 방식이다</li>\n</ul>\n<h3>2. docker Image</h3>\n<ul>\n<li>도커 이미지를 어떻게 만드는지 학습하자!</li>\n<li><strong>스크립트의 집합</strong>이라고 정리할 수 있다. (여러 이미지를 Layer로 쌓아 원하는 형태의 이미지를 만드는 것이 일반적이다)\n<ul>\n<li>EX) ubuntu 이미지에 apache 웹서버 이미지를 얹어서 웹서버 이미지를 만든다.</li>\n</ul>\n</li>\n</ul>\n<h3>3. docker container</h3>\n<ul>\n<li>만들어진 도커 이미지를 도커 컨테이너로 만들어 실행시키는지 학습하자!</li>\n<li>이미지를 만들고 컨테이너로 실행</li>\n</ul>\n<h1>2. 이미지를 다루는 다양한 옵션</h1>\n<ol>\n<li>도커 설치</li>\n<li>docker image 다운로드</li>\n<li>다운로드 받은 image로 docker container 생성 및 실행</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docekr image 명령 옵션 …</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> container 명령 옵션 …</code></pre></div>\n<p>이미지 다운 받기 위해 Docker hub 가입하기</p>\n<ul>\n<li>docker 이미지를 직접 작성해 사용 가능</li>\n<li>파이선/js 라이브러리처럼 미리 작성해놓은 이미지를 다운받을 수 있음</li>\n</ul>\n<h2>명령어</h2>\n<p>docker 가 떠있는지 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl status <span class=\"token function\">docker</span></code></pre></div>\n<p>docker hub 로그인/로그아웃</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> login\n<span class=\"token function\">docker</span> <span class=\"token builtin class-name\">logout</span> <span class=\"token comment\"># 해당 명령을 사용하는 일은 거의 없다.</span></code></pre></div>\n<p>다운로드 받을 이미지 검색</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> search ubuntu</code></pre></div>\n<ul>\n<li>이미지 명에 슬래시가 있다면은 <code class=\"language-text\">제작한사용자명/이미지이름</code> 따라서 공식 이미지는 아니다.</li>\n<li>이미지는 <code class=\"language-text\">이미지명[:태그]</code>로 이루어질 수 있다.\n<ul>\n<li>태그는 보통 버전 정보를 넣는 경우가 많다.</li>\n<li>만약 태그를 넣지 않는 경우 태그명은 <code class=\"language-text\">:latest</code> 가 된다.</li>\n</ul>\n</li>\n</ul>\n<p>이미지 다운로드 pull</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> pull ubuntu <span class=\"token comment\"># 자동으로 latest 버전 다운됨</span>\n<span class=\"token function\">docker</span> pull ubuntu:20.10</code></pre></div>\n<p>다운받은 이미지 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> images\ndocekr image <span class=\"token function\">ls</span>\n\n<span class=\"token comment\"># 다운받은 이미지의 IMAGE ID만 출력</span>\n<span class=\"token function\">docker</span> image <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-q</span></code></pre></div>\n<p>다운받은 이미지 삭제하기</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> rmi 이미지ID<span class=\"token punctuation\">(</span>혹은 이미지 REPO 이름<span class=\"token punctuation\">)</span>\n<span class=\"token function\">docker</span> image <span class=\"token function\">rm</span> 이미지ID<span class=\"token punctuation\">(</span>혹은 이미지 REPO 이름<span class=\"token punctuation\">)</span></code></pre></div>\n<h1>3. 컨테이너를 다루는 다양한 옵션 (1)</h1>\n<p>컨테이너 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> create ubuntu</code></pre></div>\n<ul>\n<li>각 이미지는 컨테이너로 만들어줘야 실행 가능하다.</li>\n<li>이미지와 컨테이너는 각각 관리해줘야 한다.</li>\n<li>컨테이너 생성시, docker 프로그램에서 이름이 자동 부여된다.</li>\n<li>생성시, 컨테이너 아이디가 나온다. (full id)</li>\n</ul>\n<p>실행 중인 컨테이너 확인</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token comment\"># 실행 중인 컨테이너</span>\n<span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-a</span> <span class=\"token comment\"># 실행 중이지 않은 전체 컨테이너 확인</span>\n<span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-a</span> <span class=\"token parameter variable\">-q</span> <span class=\"token comment\"># 실행 중이지 않은 전체 컨테이너 중에 CONTAINER ID만 출력</span></code></pre></div>\n<ul>\n<li>status 로 컨테이너 실행 상태를 알 수 있다\n<ul>\n<li><code class=\"language-text\">created</code> 생성</li>\n<li><code class=\"language-text\">up</code> 실행중</li>\n<li><code class=\"language-text\">pause</code> 중지</li>\n<li><code class=\"language-text\">existed</code> 종료</li>\n</ul>\n</li>\n<li>도커는 특정 운영체제를 감싸기 보단, 프로그램을 감싸는 것!</li>\n<li>따라서 컨테이너는 어떤 프로그램을 실행시켜주는 컨테이너! <code class=\"language-text\">COMMAND</code>에서 어떤 프로그램을 실행시켜주는지 알려준다.</li>\n</ul>\n<p>컨테이너 삭제</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> 삭제할 컨테이너 아이디</code></pre></div>\n<p>원하는 이름으로 컨테이너 생성</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> create <span class=\"token parameter variable\">--name</span> 원하는이름 이미지이름\n<span class=\"token function\">docker</span> create <span class=\"token parameter variable\">--name</span> myubuntu ubuntu</code></pre></div>\n<h1>4. 컨테이너를 다루는 다양한 옵션 (2)</h1>\n<p>컨테이너 실행</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> start 컨테이너이름</code></pre></div>\n<ul>\n<li>위처럼 실행시, 컨테이너 실행하면 바로 중지된다. (<code class=\"language-text\">docekr ps -a</code> 로 확인가능)</li>\n<li>계속 실행하기 위해선 <code class=\"language-text\">run</code> 명령어를 활용한다.</li>\n</ul>\n<p>표준 스트림</p>\n<ul>\n<li><code class=\"language-text\">STDIN</code> : 표준입력</li>\n<li><code class=\"language-text\">STDOUT</code> : 표준출력</li>\n<li><code class=\"language-text\">STDERR</code> : 표준에러</li>\n<li>fork() 시스템콜을 사용할 경우, 해당 함수를 호출하는 프로그램은 부모 프로세스가 되고, fork()를 통해 실행되는 프로그램은 자식 프로세스가 된다.</li>\n</ul>\n<h1>5. 컨테이너를 다루는 다양한 옵션 (3)</h1>\n<p>이미지 생성하면서 실행하는 명령어</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run</code></pre></div>\n<ul>\n<li>주요 옵션\n<ul>\n<li><code class=\"language-text\">-i</code> : 컨테이너 입력 STDIN 을 열어놓는 옵션</li>\n<li><code class=\"language-text\">-t</code> : 가상 터미널(tty : teletypewriter) 를 열어놓는\n<ul>\n<li>주로 <code class=\"language-text\">-it</code>로 사용 (<strong>컨테이너 내로 접근해서 키보드 입력을 넣을 수 있다</strong>)</li>\n</ul>\n</li>\n<li><code class=\"language-text\">--name</code> :</li>\n<li><code class=\"language-text\">-d</code> :</li>\n<li><code class=\"language-text\">--rm</code></li>\n<li><code class=\"language-text\">-p</code></li>\n<li><code class=\"language-text\">-v</code></li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 컨테이너 실행 후, 해당 ubuntu로 들어가서, 터미널로 명령어</span>\n<span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> ubuntu\n\n<span class=\"token comment\"># 컨테이너 이름을 원하는 이름으로 변경</span>\n<span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--name</span> myubuntu ubuntu\n\n<span class=\"token comment\"># exit 명령으로 종료시, 컨테이너도 종료된다.</span></code></pre></div>\n<p>컨테이너 종료와 함께 컨테이너 삭제하는 옵션</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--rm</span> <span class=\"token parameter variable\">--name</span> myubuntu3 ubuntu</code></pre></div>\n<ul>\n<li>ubuntu 이미지를 myubuntu3 라는 이름으로 컨테이너 실행하는데, 종료할시 삭제됨</li>\n</ul>\n<p>백그라운드로 실행하기 (실행 중인 상태지만, 터미널 입력은 받지 않는 상태)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--name</span> myubuntu3 ubuntu\n\n<span class=\"token comment\"># 백그라운드 실행 중인 컨테이너에 들어가서 명령 내리기</span>\n<span class=\"token function\">docker</span> attach myubuntu3</code></pre></div>\n<h1>6. 컨테이너를 다루는 다양한 옵션 (4)</h1>\n<p>실행 중인 컨테이너 <strong>종료</strong>하기</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> stop myubuntu3</code></pre></div>\n<ul>\n<li>참고로 중지하는 명령어는 <code class=\"language-text\">docker pause 컨테이너</code> 이고 다시 실행시키는 명령어는 <code class=\"language-text\">docker unpause 컨테이너</code></li>\n</ul>\n<h2>1. 웹서버로 docker run 옵션 테스트하기</h2>\n<ul>\n<li>웹서버는 크게 두가지 프로그램이 많이 사용된다.\n<ul>\n<li>apache</li>\n<li>nginx (엔진엑스)</li>\n</ul>\n</li>\n</ul>\n<h3>1-1. apache 웹서버 공식 docker 찾기</h3>\n<ul>\n<li>각 docker 마다 <strong>공식 이름이 프로그램명과 동일한 경우가 일반적</strong>이지만, apache는 <code class=\"language-text\">httpd</code> 이름을 사용</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> search httpd\n<span class=\"token function\">docker</span> search httpd <span class=\"token parameter variable\">--limit</span><span class=\"token operator\">=</span><span class=\"token number\">5</span></code></pre></div>\n<h3>1-2. 이미지 다운로드 받고 바로 컨테이너로 만들어 실행시키기</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run httpd</code></pre></div>\n<p>백그라운드에 컨테이너 실행하기</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--name</span> apachweb httpd</code></pre></div>\n<ul>\n<li>이번에는 해당 웹서버에 어떻게 접속해야하는지 알 수 없다! 이 때, “**포트 포워딩”**이 필요하다.\n<ul>\n<li>docker를 실행한 PC를 Host PC(호스트 PC)라고 한다.</li>\n<li>docker 컨테이너가 실행되면, 172.17.0.0/16 인 Private IP가 할당된다.</li>\n<li>호스트 PC IP에 특정 Port로 접근시, 해당 포트를 docker 컨테이너의 특정 Private IP의 특정 포트로 변환해줄 수 있다. 이를 <strong>NAPT 기술</strong>이라고 한다.</li>\n<li>이를 지원해주는 것은 <code class=\"language-text\">-p</code> 옵션이다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9999</span>:80 <span class=\"token parameter variable\">--name</span> apachweb2 httpd</code></pre></div>\n<ul>\n<li>\n<p>위 같이 작성하면, apacheweb2 컨테이너는 apache 웹서버 프로그램을 실행하고, 호스트 PC에 9999 포트로 접속하면, 자동으로 이를 해당 컨테이너의 80 포트에 연결해주겠다. 라는 의미이다.</p>\n</li>\n<li>\n<p>위 실행후, 크롬 웹브라우저상에서 <a href=\"http://localhost:9999\">localhost:9999</a> 에 접속하면 확인할 수 있다.</p>\n<ul>\n<li>리눅스 서버인 경우, EC2 콘솔에서 추가 작업이 필요하다</li>\n<li>보안 그룹 → 인바운드 규칙 → 인바운드 규칙 편집 → 9999 포트 추가</li>\n<li><code class=\"language-text\">퍼블릭IPv4주소:9999</code> 로 접속하면 It works 화면 확인 가능!</li>\n</ul>\n</li>\n</ul>\n<h1>7. 컨테이너를 다루는 다양한 옵션 (5)</h1>\n<h3>1-3. <code class=\"language-text\">-v</code> 옵션 이해하기 (volume)</h3>\n<ul>\n<li>내가 만든 파일을 서버에 올리고 싶다면?</li>\n<li>docker는 <strong>이미지를 기반으로 컨테이너를 만들기 때문에</strong> 컨테이너 상에서 파일을 업데이트하거나, 생성할 경우, 컨테이너가 종료되면, 해당 파일이 없어진다.\n<ul>\n<li>이를 보완하기 위해, 특정 폴더를 <code class=\"language-text\">-v</code> 옵션으로 교체 (<strong>공유</strong> 혹은 <strong>바인딩</strong>이라는 용어를 사용한다)하면, 해당 폴더는 호스트 PC에 있기 때문에, 컨테이너가 종료되도 파일이 유지된다.</li>\n</ul>\n</li>\n<li>배포시 볼 수 있는 “It works”는 httpd 이미지의 apache 웹서버 기본 설정에 의해 /usr/local/apache2/htdocs 폴더에 있는 index.html 파일이다.</li>\n<li>호스트 PC 상에 내가 보여줄 index.html 파일이 있다면 -v 옵션을 이용하여, 호스트 PC의 특정 폴더를 docker 컨테이너의 특정 폴더로 교체할 수 있다.</li>\n</ul>\n<h3>+ 기존 설정으로 되어 있는 docker 컨테이너의 폴더를 호스트 PC의 특정 폴더로 수정하기</h3>\n<ol>\n<li>\n<p>File zila 다운로드</p>\n<ul>\n<li><a href=\"https://filezilla-project.org/\">https://filezilla-project.org/</a></li>\n</ul>\n</li>\n<li>\n<p>왼쪽 상단 호스트 위 → 사이트 관리자 클릭 → New Site → 사이트 명 입력 (Ex. DockerTest) → 프로토콜 변경 (SFTP - SSH File Transfer Protocol) → 로그온 유형 변경 (키 파일) → 사용자 변경 (ubuntu) → key 파일 첨부 (AWS에서 발급받은 pem key) → 호스트에 public IPv4 주소 혹은 탄력적 IP 입력 (EC2 콘솔 확인)</p>\n</li>\n</ol>\n<p>호스트 PC 절대 경로와 함께 -v 태그 사용하기 (디렉토리 위치에서 <code class=\"language-text\">pwd</code> 로 확인가능)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># -v 옵션만 쓴다면 다음과 같이 작성할 수 있다</span>\n<span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-v</span> 호스트_PC_절대경로:도커_컨테이너_절대경로 httpd\n\n<span class=\"token comment\"># 다른 옵션과 함께 사용한 실제 예시</span>\n<span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9999</span>:80 <span class=\"token parameter variable\">-v</span> 호스트_PC_절대경로:도커_컨테이너_절대경로 <span class=\"token parameter variable\">--name</span> apacheweb3 httpd</code></pre></div>\n<ul>\n<li>컨테이너 안에서 파일을 수정할 필요없이, <code class=\"language-text\">-v</code> 옵션을 쓴다면 호스트 PC에서 수정한 내역을 업로드하여 업데이트할 수 있다.</li>\n</ul>\n<h2>8. 컨테이너를 다루는 다양한 옵션 (6)</h2>\n<p>docker가 가지고 있는 저장매체 현황 확인하기</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> system <span class=\"token function\">df</span></code></pre></div>\n<ul>\n<li>저장매체 공간이 이슈가 될 수도 있으므로 위 명령어를 알아놓자.</li>\n</ul>\n<h2>docker와 Alpine</h2>\n<ul>\n<li>ubuntu의 모든 기능을 쓰는 것은 아니고, 필요한 기능만 이미지로 다운 받는 방법 없을까?</li>\n<li>이미지에는 다양한 태그가 있음 (Ex. httpd - Tags) <a href=\"https://hub.docker.com/_/httpd?tab=tags\">https://hub.docker.com/_/httpd?tab=tags</a></li>\n<li>대부분 docker 이미지에 가장 기본이 되는 이미지는 ubuntu가 아닌, alpine인 경우가 많다. alpine 은 최소의 기능만 가진 이미지라고 이해하면 된다.</li>\n</ul>\n<h3>alpine이란?</h3>\n<ul>\n<li>musl libc 라는 임베디드 리눅스를 위한 C/POSIX library 와 Busy Box는 운영체제 운영에 필요한 가장 기본이 되는 유틸리티만 모아놓은 리눅스 패키지이다.</li>\n</ul>\n<h3>httpd와 alpine</h3>\n<ul>\n<li>httpd도 태그 중에 alpine 기반 태그가 있다.\n알파인으로 컨테이너 깔아놓기\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9999</span>:80 <span class=\"token parameter variable\">-v</span> /home/ubuntu/2021_DEV_HTML:/usr/local/apache2/htdocs <span class=\"token parameter variable\">--name</span> apacheweb httpd:alpine</code></pre></div>\n</li>\n</ul>\n<p>실행 중인 컨테이너 사용 리소스 확인하기</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> container status <span class=\"token comment\"># 컨트롤+C 로 종료가능</span></code></pre></div>","frontmatter":{"title":"도커 시작하기 : 서버 구축을 위한 주요 명령어 및 옵션 정리","category":"Docker","date":"July 09, 2022","description":null}},"previous":{"fields":{"slug":"/docker/2022-07-05_큰그림그리기/"},"frontmatter":{"title":"도커의 필요성, 마이크로서비스를 통한 큰 그림 그리기"}},"next":{"fields":{"slug":"/next-js/2022-08-10-storybook-tailwindcss-미적용이슈/"},"frontmatter":{"title":"NextJS Storybook 환경에서 Tailwind css 미적용 이슈 해결하기"}}},"pageContext":{"id":"d21a39f0-95f6-5492-9ddb-da1043b6f560","previousPostId":"c984f1b3-30fd-52a8-a662-87b17c894163","nextPostId":"5b1b6b8b-fbc1-57a5-a295-acf739233b56"}},"staticQueryHashes":["2841359383","3274528899"]}