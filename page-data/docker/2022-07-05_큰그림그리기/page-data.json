{"componentChunkName":"component---src-templates-blog-post-js","path":"/docker/2022-07-05_큰그림그리기/","result":{"data":{"site":{"siteMetadata":{"title":""}},"markdownRemark":{"id":"c984f1b3-30fd-52a8-a662-87b17c894163","excerpt":"서버는 2…","html":"<ol>\n<li>서버는 24시간 구동이 필요하며, 특정 목적으로 사용되는 프로그램 많다. (웹서버)</li>\n<li>다양한 리눅스 패키지와 업데이트로 프로그램 설정이 수시로 바뀐다.</li>\n<li>서버 이전시 이전할 서버에 맞도록 재설정 필요하다.\n<ul>\n<li>서버 관리자 들이 싫어하는 사례 😢</li>\n</ul>\n</li>\n</ol>\n<p>-> 위 번거로운 작업을 해결하는 <code class=\"language-text\">DOCKER</code> 이다!</p>\n<h3>DOCKER?</h3>\n<ul>\n<li>일종의 서버 환경을 감싸서, 도커 레벨로 서버를 다룰 수 있다.\n(= 도커로 감쌌다! 말았다! 라고 표현)</li>\n<li>위에 나온 서버 이전, 패키지 버전 변경 등 서버 설정 불필요하다.</li>\n<li>단순히 도커를 만들어 서버에서 실행하면 된다!</li>\n</ul>\n<h3>웹서비스 개발과 마이크로 서비스</h3>\n<ul>\n<li>\n<p>모놀리틱 구조</p>\n<ul>\n<li>하나에 서버에 모든 기능을 넣는 구조이다.\n<ul>\n<li>1세대 : READ Static HTML</li>\n<li>2세대 : Create request based HTML from CFI + DB</li>\n<li>3세대 : MVC 패턴 기반 프레임워크 활용</li>\n</ul>\n</li>\n<li>문제점 : 서비스가 방대해지면서, 하나의 서버에 기능을 모아 놓으면, 특정 기능의 문제로 전체 시스템에 장애 발생한다…</li>\n</ul>\n</li>\n<li>\n<p>마이크로 서비스</p>\n<ul>\n<li>여러 서버에 <strong>각 기능을 분산</strong>해놓고, <strong>REST API 등 통신</strong>을 통해 전체 서비스 운영하는 방식이다.</li>\n</ul>\n</li>\n</ul>\n<h3>개발팀과 운영팀</h3>\n<ul>\n<li>마이크로 서비스 조직은 각 조직이 각각의 세부 서비스를 담당하고 수시로 릴리즈한다.</li>\n<li>기능 릴리즈 → 개발팀이 운영팀에 어떻게 운영할지 안내 → 많은 기능이라면 알려주기 어렵고, 운영이 잘 안될 경우 운영팀에서 알려주지 않음 → 서비스 다운 혹은 비정상 동작으로 <strong>고객 경험 저하</strong></li>\n<li>수많은 마이크로 기능과 수많은 사용자가 존재한다면…\n<ul>\n<li>엄청한 트래픽을 견딜 시스템과 운영팀 필요하다.</li>\n</ul>\n</li>\n</ul>\n<p>-> DevOps 분야는 이를 위한 해결책으로 등장하였다.</p>\n<h3>DevOps</h3>\n<ul>\n<li>운영 + 운영시스템 효율화/자동화 프로젝트가 목표이다.\n<ul>\n<li>release system 자동화</li>\n<li>코드리뷰, 테스트 자동화</li>\n<li>서비스 모니터링 시스템</li>\n<li>이슈 발생시 커뮤니케이션 시스템\n⇒ <code class=\"language-text\">자동 배포</code></li>\n</ul>\n</li>\n</ul>\n<h2>정리</h2>\n<ul>\n<li>각 마이크로 서비스 ⇒ <code class=\"language-text\">도커</code> 를 통해 개발</li>\n<li>초대용량 서비스 유지 보수 위한 서버 핸들링 ⇒ <code class=\"language-text\">쿠버네티스</code> (네트워크 트래픽에 따른 서버 관리)</li>\n<li>수시 릴리즈를 지원하기 위한 배포 시스템 ⇒ git 신규 코드 릴리즈 ⇒ Jenkins/Travis CI 등으로 서버 자동 재가동 ⇒ <code class=\"language-text\">배포 자동화</code></li>\n<li>서비스 중단은 되지 않도록 ⇒ <code class=\"language-text\">무중단 배포</code></li>\n</ul>","frontmatter":{"title":"도커의 필요성, 마이크로서비스를 통한 큰 그림 그리기","category":"Docker","date":"July 05, 2022","description":null}},"previous":{"fields":{"slug":"/web/2022-06-25_network/"},"frontmatter":{"title":"네트워크 통신"}},"next":{"fields":{"slug":"/docker/2022-07-09_이미지와컨테이너/"},"frontmatter":{"title":"도커 시작하기 : 서버 구축을 위한 주요 명령어 및 옵션 정리"}}},"pageContext":{"id":"c984f1b3-30fd-52a8-a662-87b17c894163","previousPostId":"fd6d92ee-be6b-5d04-9e79-7d7e088de43b","nextPostId":"d21a39f0-95f6-5492-9ddb-da1043b6f560"}},"staticQueryHashes":["2841359383","3274528899"]}