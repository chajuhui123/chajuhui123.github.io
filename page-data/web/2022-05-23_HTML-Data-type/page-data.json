{"componentChunkName":"component---src-templates-blog-post-js","path":"/web/2022-05-23_HTML-Data-type/","result":{"data":{"site":{"siteMetadata":{"title":""}},"markdownRemark":{"id":"2f5071bf-030f-5179-8712-b074a3f83274","excerpt":"HTML Data-type ? HTML 특정 요소와 연관되어 있지만 확정된 의미는 갖지 않는 데이터에 대한 확장 가능성을 염두에 두고 디자인되었습니다.  은 표준이 아닌 속성이나 추가적인 DOM 속성, \r\n과 같은 다른 조작을 하지 않고도, 의미론적 표준 HTML…","html":"<h1>HTML Data-type ?</h1>\n<p>HTML 특정 요소와 연관되어 있지만 확정된 의미는 갖지 않는 데이터에 대한 확장 가능성을 염두에 두고 디자인되었습니다. <code class=\"language-text\">data-*</code> 은 표준이 아닌 속성이나 추가적인 DOM 속성, <code class=\"language-text\">Node.setUserData()</code>\r\n과 같은 다른 조작을 하지 않고도, 의미론적 표준 HTML 요소에 추가 정보를 저장할 수 있도록 해줍니다. <a href=\"https://developer.mozilla.org/ko/docs/Learn/HTML/Howto/Use_data_attributes\">By MDN</a></p>\n<h3>언제 사용할까요?</h3>\n<p>CSS 속성 선택자로 들어오는 데이터에 따라 스타일을 바꾸는데 사용할 수 있습니다.</p>\n<p>예를 들어 쇼핑몰을 개발할 때 상품에 대한 상태가 다양하고 (Ex. 임금대기, 배송준비, 배송출발, 도착, 환불, 취소 등…) 해당 데이터에 따라 스타일이 달라져야 할 때, 유용하게 작성할 수 있습니다.</p>\n<p>각 데이터에 대한 className을 하나하나 지정하는 편보다, <code class=\"language-text\">data-type</code> 과 <code class=\"language-text\">속성선택자</code>를 통해 예측 가능하고 확장가능한 코드를 작성할 수 있습니다.</p>\n<p>검색 엔진에 노출되지 않는다는 문제점도 있지만, 스타일 커스텀에 사용되는 메타 데이터가 있을 때는 좋은 방안이 될 것 같습니다.</p>\n<h3>사용 예시를 살펴봅시다.</h3>\n<p><code class=\"language-text\">data-</code> 로 시작하게 작성할 수 있고, <code class=\"language-text\">data-*</code> 뒤에 붙은 내용을 속성 이름으로 사용합니다.</p>\n<p>또한 각 속성은 <code class=\"language-text\">문자열</code>로 저장됩니다. 따라서 Number, Boolean 값을 사용하더라도 <code class=\"language-text\">String</code> 형태로 작성해야합니다.</p>\n<p>Data Type은 순수 HTML 속성이기에 JS, CSS을 통해 접근할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">data-info</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{data.develiveryInfo}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> {data.develiveryInfo} <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">span[data-info='”WAITING”']</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> “gray”<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token selector\">span[data-info='”DELIVERY”']</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> “blue”<span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"HTML Data-type 활용하기","category":"web","date":"May 23, 2022","description":null}},"previous":{"fields":{"slug":"/java-script/2022-03-24-es6/"},"frontmatter":{"title":"JavaScript의 역사와 함께 알아보는, ES6의 등장"}},"next":{"fields":{"slug":"/java-script/2022-05-30_if-else-in-JS/"},"frontmatter":{"title":"JS에서 if - else if - else 문을 지양해야하는 이유"}}},"pageContext":{"id":"2f5071bf-030f-5179-8712-b074a3f83274","previousPostId":"d8bba543-475c-53b9-986e-5150c962782f","nextPostId":"be6f98f0-70a6-5687-8e14-2ff04fcd9227"}},"staticQueryHashes":["2841359383","3274528899"]}