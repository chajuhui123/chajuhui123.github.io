{"componentChunkName":"component---src-templates-blog-post-js","path":"/front/2022-10-06-CSR과SSR/","result":{"data":{"site":{"siteMetadata":{"title":""}},"markdownRemark":{"id":"1a8b5421-80aa-5b42-9259-e67d8c3d8e7d","excerpt":"현업에서 NextJS를 사용하는 비율이 점점 증가합니다. NextJS를 쓰는 이유를 알아보기 이전에, 가장 큰 특징이라고 이야기할 수 있는 과 에 대해서 알면 좋을 것같습니다. 1. CSR VS SSR CSR 먼저 Single Page Application. 즉, SPA…","html":"<p>현업에서 NextJS를 사용하는 비율이 점점 증가합니다.</p>\n<p>NextJS를 쓰는 이유를 알아보기 이전에, 가장 큰 특징이라고 이야기할 수 있는 <code class=\"language-text\">SSR</code>과 <code class=\"language-text\">CSR</code>에 대해서 알면 좋을 것같습니다.</p>\n<h2>1. CSR VS SSR</h2>\n<h3>CSR</h3>\n<p>먼저 Single Page Application. 즉, SPA는 한 개의 페이지로 이루어진 애플리케이션입니다.</p>\n<p>SPA의 동작 방식은 <strong>하나의 페이지를 동적으로 변경하여 콘텐츠를 랜더링</strong>하는 방식입니다. 페이지 리로딩이 없이 자연스러운 화면 전환과 좋은 UX로 이어집니다.</p>\n<p>과거 웹은 Multi Page Application으로 페이지를 갱신할 때마다 서버로부터 새로운 HTML을 요청했기에 비효율적이었습니다.</p>\n<p>SPA는 필요한 영역의 데이터만 요청해 갱신할 수 있기 효율적입니다. 이처럼 <strong>클라이언트 영역에서 화면을 제어하는 랜더링을 Client Side Rendering, 즉 CSR</strong>라고 합니다.</p>\n<ul>\n<li>장점\n<ul>\n<li>변경이 필요한 부분만 요청해 갱신할 수 있기에 UX가 좋다.</li>\n<li>전체 UI를 로드하지 않기 때문에 초기 로딩 이후에 대한 로드 시간이 빠르다.</li>\n</ul>\n</li>\n<li>단점\n<ul>\n<li>애플리케이션의 규모가 커지면, 초기에 로딩해야하는 자바스크립트 혹은 번들의 용량이 크다. 이는 초기 로딩의 성능 저하의 원인이 된다.</li>\n<li>검색 최적화 (SEO)가 어렵다. 현존하는 검색 엔진(구글봇 제외)은 JavaScript 코드 실행없이, 파싱된 HTML을 대상으로 크롤링하는데, SPA 동작 방식은 크롤링이 되기 어렵다.</li>\n</ul>\n</li>\n</ul>\n<h3>SSR</h3>\n<p><strong>Server Side Rendering, SSR은 서버에서 사용자에게 보여질 페이지를 모두 구성해 사용자에게 보여주는 방식</strong>입니다. MPA에서 사용했던 방식이라고 볼 수 있습니다.</p>\n<p>SPA의 단점으로 초기 로딩 속도나 SEO의 어려움이 도출되었는데, 이는 SSR을 통해 극복할 수 있을 것입니다.</p>\n<ul>\n<li>장점\n<ul>\n<li>서버에서 페이지의 구성을 마쳤기 때문에 SEO에 좋다. 검색 엔진이 JavaScript 코드를 실행하지 않아도 콘텐츠를 파싱할 수 있기 때문이다.</li>\n<li>(보편적으로) 전체 콘텐츠를 구성되는 시점이 CSR에 비해 더 빠르다.</li>\n</ul>\n</li>\n<li>단점\n<ul>\n<li>서버는 항상 각 요청이 올때마다 HTML파일을 생성하기 때문에 CDN 수준에서의 컨텐츠 캐시가 되지 않는다.</li>\n<li>페이지 로드가 너무 오래걸린다면 오히려 UX를 해칠 수 있다. (ex. 데이터가 많은 대시보드, 통계 자료 등)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>2. SPA(Single Page Application)에서 SSR이 필요한 이유는?</h2>\n<p>CSR과 SSR의 장단점은 <code class=\"language-text\">상호보완적</code>입니다. 따라서 CSR을 사용하되, SSR을 필요한 부분에 사용하여 <strong>단점을 보완</strong>하는 방식을 찾아야할 것 같습니다.</p>\n<p>동적인 요소(JS)가 많거나, 초기페이지 구성이 오래걸릴 때(네트워크 느릴 때) SSR을 도입하여 <strong>페이지 콘텐츠 랜더링 완료 시점을 개선</strong>할 수 있습니다. 또한 SEO가 중요한 프로젝트에서 SSR을 사용해 <strong>검색엔진에 최적화</strong>할 수 있습니다.</p>\n<p>CSR+SSR 방식을 API로 지원하는 프레임워크 <code class=\"language-text\">NextJS</code>도 등장하였습니다.</p>\n<hr>\n<h2>3. NextJS가 실행되면 무슨 일이 일어날까?</h2>\n<h4>미션 : Next.js 프로젝트를 세팅한 뒤 yarn start 스크립트를 실행했을 때 실행되는 코드를 nextjs github 레포지토리에서 찾은 뒤, 해당 파일에 대한 간단한 설명을 첨부해주세요.</h4>\n<h5>1. yarn start 후 (빌드 오류)</h5>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">yarn run v1<span class=\"token punctuation\">.</span><span class=\"token number\">22.10</span>\r\n$ next start\r\nready <span class=\"token operator\">-</span> started server on <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token operator\">:</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token operator\">:</span><span class=\"token number\">3000</span>\r\n<span class=\"token literal-property property\">Error</span><span class=\"token operator\">:</span> Could not find a production build <span class=\"token keyword\">in</span> the <span class=\"token string\">'~/.next'</span> directory<span class=\"token punctuation\">.</span> Try building your app <span class=\"token keyword\">with</span> <span class=\"token string\">'next build'</span> before starting the production server<span class=\"token punctuation\">.</span> https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>nextjs<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>docs<span class=\"token operator\">/</span>messages<span class=\"token operator\">/</span>production<span class=\"token operator\">-</span>start<span class=\"token operator\">-</span>no<span class=\"token operator\">-</span>build<span class=\"token operator\">-</span>id\r\n    at NextNodeServer<span class=\"token punctuation\">.</span><span class=\"token function\">getBuildId</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token operator\">/</span>node_modules<span class=\"token operator\">/</span>next<span class=\"token operator\">/</span>dist<span class=\"token operator\">/</span>server<span class=\"token operator\">/</span>next<span class=\"token operator\">-</span>server<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">169</span><span class=\"token operator\">:</span><span class=\"token number\">23</span><span class=\"token punctuation\">)</span>\r\n    at <span class=\"token keyword\">new</span> <span class=\"token class-name\">Server</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token operator\">/</span>node_modules<span class=\"token operator\">/</span>next<span class=\"token operator\">/</span>dist<span class=\"token operator\">/</span>server<span class=\"token operator\">/</span>base<span class=\"token operator\">-</span>server<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">58</span><span class=\"token operator\">:</span><span class=\"token number\">29</span><span class=\"token punctuation\">)</span>\r\n    at <span class=\"token keyword\">new</span> <span class=\"token class-name\">NextNodeServer</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token operator\">/</span>node_modules<span class=\"token operator\">/</span>next<span class=\"token operator\">/</span>dist<span class=\"token operator\">/</span>server<span class=\"token operator\">/</span>next<span class=\"token operator\">-</span>server<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">70</span><span class=\"token operator\">:</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\r\n    at NextServer<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token operator\">/</span>node_modules<span class=\"token operator\">/</span>next<span class=\"token operator\">/</span>dist<span class=\"token operator\">/</span>server<span class=\"token operator\">/</span>next<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">140</span><span class=\"token operator\">:</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\r\n    at async <span class=\"token operator\">~</span><span class=\"token operator\">/</span>node_modules<span class=\"token operator\">/</span>next<span class=\"token operator\">/</span>dist<span class=\"token operator\">/</span>server<span class=\"token operator\">/</span>next<span class=\"token punctuation\">.</span>js<span class=\"token operator\">:</span><span class=\"token number\">149</span><span class=\"token operator\">:</span><span class=\"token number\">31</span>\r\nerror Command failed <span class=\"token keyword\">with</span> exit code <span class=\"token number\">1.</span>\r\ninfo Visit https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>yarnpkg<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>en<span class=\"token operator\">/</span>docs<span class=\"token operator\">/</span>cli<span class=\"token operator\">/</span>run <span class=\"token keyword\">for</span> documentation about <span class=\"token keyword\">this</span> command<span class=\"token punctuation\">.</span></code></pre></div>\n<p>프로젝트 셋팅 후 yarn start 명령어를 입력하면 가장 먼저 에러를 마주칩니다.\r\n<code class=\"language-text\">Error: Could not find a production build in the '~/.next'</code> 라는 메시지를 보아하면 Build 파일이 없다는 것을 알려줍니다.</p>\n<p>에러 메시지를 통해 에러의 발생지를 알 수 있습니다.</p>\n<p><code class=\"language-text\">~/node_modules/next/dist/server/next-server.js:169:23</code>, <code class=\"language-text\">~/node_modules/next/dist/server/base-server.js:58:29</code>, <code class=\"language-text\">~/node_modules/next/dist/server/next-server.js:70:9</code>, <code class=\"language-text\">~/node_modules/next/dist/server/next.js:140:16</code>, <code class=\"language-text\">~/node_modules/next/dist/server/next.js:149:31</code>.</p>\n<p>nextjs github 페이지의 경우, <a href=\"https://github.com/vercel/next.js/blob/canary/packages/next/server/next.ts\">https://github.com/vercel/next.js/blob/canary/packages/next/server/next.ts</a> 라고 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\r\n<span class=\"token comment\">// next.js</span>\r\n<span class=\"token keyword\">async</span> <span class=\"token function\">getServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serverPromise<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>getServerImpl<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serverPromise <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">loadConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">conf</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\r\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n                    <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">,</span>\r\n                    conf\r\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>preparedAssetPrefix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">setAssetPrefix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>preparedAssetPrefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                <span class=\"token punctuation\">}</span>\r\n                <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>server<span class=\"token punctuation\">;</span>\r\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serverPromise<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token comment\">// ...</span>\r\n<span class=\"token comment\">// next.js</span>\r\n <span class=\"token keyword\">async</span> <span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">const</span> DevServer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./dev/next-dev-server\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">;</span>\r\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DevServer</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">const</span> ServerImplementation <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getServerImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerImplementation</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>오류 파일을 하나씩 타다보면 <code class=\"language-text\">오류 메시지를 던진 위치</code>를 파악할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// next-server.js</span>\r\n<span class=\"token function\">getBuildId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> buildIdFile <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> _path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>distDir<span class=\"token punctuation\">,</span> _constants<span class=\"token punctuation\">.</span><span class=\"token constant\">BUILD_ID_FILE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">return</span> _fs<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>buildIdFile<span class=\"token punctuation\">,</span> <span class=\"token string\">\"utf8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token comment\">// 오류시, Error 메시지를 던져주는 부분</span>\r\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_fs<span class=\"token punctuation\">.</span>default<span class=\"token punctuation\">.</span><span class=\"token function\">existsSync</span><span class=\"token punctuation\">(</span>buildIdFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Could not find a production build in the '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>distDir<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">' directory. Try building your app with 'next build' before starting the production server. https://nextjs.org/docs/messages/production-start-no-build-id</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5>2. yarn start 후 (실행)</h5>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">yarn run v1<span class=\"token punctuation\">.</span><span class=\"token number\">22.10</span>\r\n$ next start\r\nready <span class=\"token operator\">-</span> started server on <span class=\"token number\">0.0</span><span class=\"token number\">.0</span><span class=\"token number\">.0</span><span class=\"token operator\">:</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token operator\">:</span><span class=\"token number\">3000</span></code></pre></div>\n<p>다시 에러 메시지의 윗 부분을 보면 <code class=\"language-text\">yarn start</code> 를 실행했을 때 <code class=\"language-text\">next start</code> 가 실행되는 것을 볼 수 있습니다.</p>\n<p>yarn start를 했는데 <strong>왜</strong> next start가 실행되는 걸까요?</p>\n<p>이것은 package.json을 확인하면 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\r\n<span class=\"token string-property property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\r\n<span class=\"token string-property property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next dev\"</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token string-property property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next build\"</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token string-property property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next start\"</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token string-property property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"next lint\"</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\r\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>yarn start시 next start가 실행되는 것을 알 수 있습니다.</p>\n<p>이 명령어에 대한 코드는 <code class=\"language-text\">node_modules/next/dist/lib/commands.js</code> 그리고 깃허브 페이지에서는 <a href=\"https://github.com/vercel/next.js/blob/canary/packages/next/lib/commands.ts\">https://github.com/vercel/next.js/blob/canary/packages/next/lib/commands.ts</a> 이곳에서 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">commands</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>command<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Promise<span class=\"token operator\">&lt;</span>cliCommand<span class=\"token operator\">></span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">// ...</span>\r\n  <span class=\"token function-variable function\">start</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../cli/next-start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>nextStart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\r\n  <span class=\"token comment\">// ...</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>코드를 살펴보면, <code class=\"language-text\">../cli/next-start</code> 에서 무언가를 다시 불러오고 있습니다. 이번엔 ../cli/next-start 경로를 따라가봅시다.</p>\n<p><code class=\"language-text\">node_modules/next/dist/cli/next-start</code>이며 깃허브 페이지에서는 <a href=\"https://github.com/vercel/next.js/blob/canary/packages/next/cli/next-start.ts\">https://github.com/vercel/next.js/blob/canary/packages/next/cli/next-start.ts</a> 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> startServer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../server/lib/start-server\"</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token comment\">//...</span>\r\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">nextStart</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">argv</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token comment\">//...</span>\r\n  <span class=\"token keyword\">const</span> keepAliveTimeout <span class=\"token operator\">=</span> keepAliveTimeoutArg\r\n    <span class=\"token operator\">?</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>keepAliveTimeoutArg<span class=\"token punctuation\">)</span>\r\n    <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> _startServer<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">startServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n      dir<span class=\"token punctuation\">,</span>\r\n      <span class=\"token literal-property property\">hostname</span><span class=\"token operator\">:</span> host<span class=\"token punctuation\">,</span>\r\n      port<span class=\"token punctuation\">,</span>\r\n      keepAliveTimeout<span class=\"token punctuation\">,</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">app</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">const</span> appUrl <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>app<span class=\"token punctuation\">.</span>hostname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>app<span class=\"token punctuation\">.</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\r\n      <span class=\"token comment\">// 이 부분이 터미널에 찍히는 부분인 것을 알 수 있습니다!</span>\r\n      <span class=\"token comment\">// ready - started server on 0.0.0.0:3000, url: http://localhost:3000</span>\r\n      Log<span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">started server on </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>host<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>app<span class=\"token punctuation\">.</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, url: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>appUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n      <span class=\"token keyword\">await</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">prepare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n      process<span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\nexports<span class=\"token punctuation\">.</span>nextStart <span class=\"token operator\">=</span> nextStart<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위의 코드를 통해 yarn start시 로그에 찍힌 <code class=\"language-text\">ready - started server on 0.0.0.0:3000, url: http://localhost:3000</code> 를 보내는 곳을 알게 되었습니다.</p>\n<p>이 때도 startServer 를 import 해서 사용하는데요. <code class=\"language-text\">../server/lib/start-server</code>의 로직을 마지막으로 살펴보겠습니다.</p>\n<p>깃허브 페이지에서는 <a href=\"https://github.com/vercel/next.js/blob/canary/packages/next/server/lib/start-server.ts\">https://github.com/vercel/next.js/blob/canary/packages/next/server/lib/start-server.ts</a> 이곳에 해당합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> type <span class=\"token punctuation\">{</span> NextServerOptions<span class=\"token punctuation\">,</span> NextServer<span class=\"token punctuation\">,</span> RequestHandler <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../next'</span>\r\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> warn <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../build/output/log'</span>\r\n<span class=\"token keyword\">import</span> http <span class=\"token keyword\">from</span> <span class=\"token string\">'http'</span>\r\n<span class=\"token keyword\">import</span> next <span class=\"token keyword\">from</span> <span class=\"token string\">'../next'</span>\r\n\r\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">StartServerOptions</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">NextServerOptions</span> <span class=\"token punctuation\">{</span>\r\n  allowRetry<span class=\"token operator\">?</span><span class=\"token operator\">:</span> boolean\r\n  keepAliveTimeout<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">startServer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">opts</span><span class=\"token operator\">:</span> StartServerOptions</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">requestHandler</span><span class=\"token operator\">:</span> RequestHandler\r\n\r\n  <span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">return</span> <span class=\"token function\">requestHandler</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>opts<span class=\"token punctuation\">.</span>keepAliveTimeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    server<span class=\"token punctuation\">.</span>keepAliveTimeout <span class=\"token operator\">=</span> opts<span class=\"token punctuation\">.</span>keepAliveTimeout\r\n  <span class=\"token punctuation\">}</span>\r\n\r\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token operator\">&lt;</span>NextServer<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">let</span> port <span class=\"token operator\">=</span> opts<span class=\"token punctuation\">.</span>port\r\n    <span class=\"token keyword\">let</span> retryCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\r\n\r\n    server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">err</span><span class=\"token operator\">:</span> NodeJS<span class=\"token punctuation\">.</span>ErrnoException</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\r\n        port <span class=\"token operator\">&amp;&amp;</span>\r\n        opts<span class=\"token punctuation\">.</span>allowRetry <span class=\"token operator\">&amp;&amp;</span>\r\n        err<span class=\"token punctuation\">.</span>code <span class=\"token operator\">===</span> <span class=\"token string\">'EADDRINUSE'</span> <span class=\"token operator\">&amp;&amp;</span>\r\n        retryCount <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span>\r\n      <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is in use, trying </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> instead.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\r\n        port <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\r\n        retryCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\r\n        server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">.</span>hostname<span class=\"token punctuation\">)</span>\r\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span>\r\n      <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n    <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">upgradeHandler</span><span class=\"token operator\">:</span> any\r\n\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>opts<span class=\"token punctuation\">.</span>dev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'upgrade'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">,</span> upgrade</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n        <span class=\"token function\">upgradeHandler</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> socket<span class=\"token punctuation\">,</span> upgrade<span class=\"token punctuation\">)</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">}</span>\r\n\r\n    server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'listening'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token keyword\">const</span> addr <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">address</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n      <span class=\"token keyword\">const</span> hostname <span class=\"token operator\">=</span>\r\n        <span class=\"token operator\">!</span>opts<span class=\"token punctuation\">.</span>hostname <span class=\"token operator\">||</span> opts<span class=\"token punctuation\">.</span>hostname <span class=\"token operator\">===</span> <span class=\"token string\">'0.0.0.0'</span>\r\n          <span class=\"token operator\">?</span> <span class=\"token string\">'localhost'</span>\r\n          <span class=\"token operator\">:</span> opts<span class=\"token punctuation\">.</span>hostname\r\n\r\n      <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token operator\">...</span>opts<span class=\"token punctuation\">,</span>\r\n        hostname<span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">customServer</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">httpServer</span><span class=\"token operator\">:</span> server<span class=\"token punctuation\">,</span>\r\n        <span class=\"token literal-property property\">port</span><span class=\"token operator\">:</span> addr <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">typeof</span> addr <span class=\"token operator\">===</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">?</span> addr<span class=\"token punctuation\">.</span>port <span class=\"token operator\">:</span> port<span class=\"token punctuation\">,</span>\r\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n      requestHandler <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n      upgradeHandler <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">getUpgradeHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n\r\n    server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">.</span>hostname<span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 로직에서는 Promise를 반환하는 것을 알 수 있습니다.</p>","frontmatter":{"title":"SSR은 왜 주목받고 있을까?","category":"front","date":"October 06, 2022","description":null}},"previous":{"fields":{"slug":"/next-js/2022-08-10-storybook-tailwindcss-미적용이슈/"},"frontmatter":{"title":"NextJS Storybook 환경에서 Tailwind css 미적용 이슈 해결하기"}},"next":{"fields":{"slug":"/cs/2022-10-07_CS-정리-개발지식/"},"frontmatter":{"title":"나만의 언어로 CS 지식 정리하기 : 개발 관련 지식"}}},"pageContext":{"id":"1a8b5421-80aa-5b42-9259-e67d8c3d8e7d","previousPostId":"83effaf7-6af1-57e6-aa4d-048f0f3a0172","nextPostId":"410110fc-6240-5922-b2f7-8cb8414f920e"}},"staticQueryHashes":["2841359383","3274528899"]}