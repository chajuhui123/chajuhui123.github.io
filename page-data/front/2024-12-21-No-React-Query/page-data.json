{"componentChunkName":"component---src-templates-blog-post-js","path":"/front/2024-12-21-No-React-Query/","result":{"data":{"site":{"siteMetadata":{"title":""}},"markdownRemark":{"id":"7f26bb06-88cc-5161-b583-1b053c1146b0","excerpt":"서론 최근 토스의 기술 포스팅 중 ESLint와 AST로 코드 퀄리티 높이기를 보면서 토스의 다양한 Rule…","html":"<h2>서론</h2>\n<p>최근 토스의 기술 포스팅 중 <a href=\"https://toss.tech/article/improving-code-quality-via-eslint-and-ast\">ESLint와 AST로 코드 퀄리티 높이기</a>를 보면서 토스의 다양한 Rule을 엿볼 수 있었어요. 포스팅 내용 중 저의 이목을 이끈 것은 <code class=\"language-text\">외부 라이브러리 사용에 관련한 규칙들</code> 관련 룰이었어요.</p>\n<p>그 중에서도 가장 인상깊은 룰은 <code class=\"language-text\">사용하지 않기로 한 패키지 사용 제한 (ban-axios, ban-lodash)</code> 이었는데, 많은 프로젝트에서 쓰이고 대중적인 라이브러리 사용을 제한하다니 이유가 궁금하기도 하고, <strong>‘재밌겠다’</strong> 라는 감정이 지배를 했어요. 나도 패키지 사용 제한? 해보고 싶은데? 라는 생각이 들었습니다. <a href=\"https://2024.stateofjs.com/ko-KR/other-tools/\">2024 프론트 관련 통계</a>에 따르면 lodash는 1위, axios는 18위를 기록할 만큼 많은 개발자들이 애정하는 라이브러리인데 말이죠.</p>\n<p>또 한편으로는, 만약 지금 우리가 편하게 쓰고 있는 JS 라이브러리들이 사라진다면… 나는 과연 프론트엔드 개발자로 일할 수 있을지 생각이 들기도 하더라구요.</p>\n<p>그래서 시작한 No 프로젝트입니다. 먼저 제 1탄으로 <code class=\"language-text\">No React Query</code> 를 선정하였습니다. 많은 FE 개발자들이 애정하는 해당 라이브러리는 패칭 관련 상태들을 제어할 수 있게 돕고, 몇가지 핵심 이점들을 통해 좋은 UX 를 만드는데 이바지 하고 있어요. 또한 React Hook 포맷으로 제공하여, 코드를 깔끔하게 작성할 수 있다는 점도 매력 포인트입니다.</p>\n<h3>React Query 의 탄생 배경</h3>\n<p>대부분의 전통적인 상태 관리 라이브러리는 <strong>클라이언트 상태</strong>(<strong>client state</strong>)를 다루는 데는 적합하지만, <strong>서버 상태/비동기 상태</strong>(<strong>server state/async state</strong>)를 다루는 데는 적합하지 않습니다. 그 이유는 서버 상태와 클라이언트 상태가 본질적으로 다르기 때문입니다. 서버 상태는 다음과 같은 특성을 가집니다.</p>\n<ul>\n<li>원격 서버에 저장되며, 클라이언트가 소유하거나 제어할 수 없는 위치에 존재할 수 있습니다.</li>\n<li>데이터를 가져오거나 업데이트하기 위해 비동기 API가 필요합니다.</li>\n<li>서버 데이터는 다른 클라이언트에게도 조회, 수정될 수 있으며, 이는 클라이언트가 모르는 상태에서 이루어질 수 있습니다.</li>\n<li>잘못 관리하면 애플리케이션 내에서 데이터가 <strong>변질</strong>(<strong>out-of-date</strong>)이 될 가능성이 있습니다.</li>\n</ul>\n<p>서버 상태를 이해하고 나면, 이를 관리하기 위한 아래와 같은 추가적인 문제들에 직면하게 됩니다.</p>\n<ul>\n<li>캐싱 (프로그래밍에서 어려운 작업 중 하나)</li>\n<li>동일한 데이터를 여러 요청에서 중복으로 요청하지 않도록 요청 병합(deduplication) 처리</li>\n<li>오래된 데이터를 백그라운드에서 업데이트</li>\n<li>데이터가 <strong>변질</strong>(<strong>out-of-date</strong>)되었는지 인지</li>\n<li>데이터를 가능한 한 빠르게 업데이트 내용을 반영</li>\n<li>페이징(pagination) 및 지연 로딩(lazy loading) 같은 성능 최적화</li>\n<li>서버 상태의 메모리 관리 및 가비지 컬렉션</li>\n<li><strong>구조적 공유</strong>(<strong>structural sharing</strong>)를 활용한 쿼리 결과의 메모이제이션(memoization)</li>\n</ul>\n<p>React Query 는 이러한 서버 상태 관리의 복잡한 문제를 극복하고, 데이터를 제어하기 위해 탄생한 기술입니다.</p>\n<h3>React Query 기능</h3>\n<p>React Query는 서버로부터 데이터 가져오기, 데이터 캐싱, 캐시 제어 등 데이터를 쉽고 효율적으로 관리할 수 있는 라이브러리입니다.</p>\n<p>현재는 TanStack Query 로 명칭하고 있습니다. v4부터 Vue나 Svelte 등의 다른 프레임워크에서도 활용할 수 있도록 기능이 확장되며 TanStack Query라는 이름으로 변경되었습니다.</p>\n<p>아래는 대표적인 기능들입니다.</p>\n<ul>\n<li>데이터 페칭: API 호출을 통해 데이터를 가져옵니다.</li>\n<li>캐싱: 동일한 데이터를 반복적으로 가져오지 않도록 캐싱합니다.</li>\n<li>데이터 유효성 검사: 캐시된 데이터의 유효성을 확인합니다.</li>\n<li>리페치: 데이터가 변경되었거나 오래된 경우 데이터를 다시 가져옵니다.</li>\n<li>중복 요청 방지: 같은 데이터 요청이 동시에 여러 번 발생하지 않도록 합니다.</li>\n<li>자동 리프레시: 백그라운드에서 데이터를 주기적으로 업데이트합니다.</li>\n</ul>\n<hr>\n<h2>데이터 패칭 &#x26; 캐싱 라이브러리</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// useFetch.js</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useFetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> fetchFn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoading<span class=\"token punctuation\">,</span> setIsLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">fetchFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 컴포넌트가 언마운트되면 요청 취소</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> fetchFn<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> isLoading <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ol>\n<li>key, fetch 문을 props 로 넘겨주면 loading 상태를 true 로 변경하고</li>\n<li>(catch) 패치 과정에서 에러가 리턴되었다면 error 응답을 저장합니다.</li>\n<li>(finally) 로딩 상태를 끝냅니다.</li>\n</ol>\n<p>data, error, isLoading 값을 리턴해주는 useFetch 훅을 작성하였습니다. 해당 훅은 컴포넌트가 마운트 상태일 때만, 실행되는 훅입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// cache.js</span>\n\n<span class=\"token keyword\">const</span> cache <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFromCache</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> cache<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setToCache</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  cache<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">clearCache</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  cache<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// useFetch 훅에 캐싱 기능 추가</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getFromCache<span class=\"token punctuation\">,</span> setToCache <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./cache\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useFetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> fetchFn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">,</span> setData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token function\">getFromCache</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>isLoading<span class=\"token punctuation\">,</span> setIsLoading<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 캐시된 데이터가 있으면 스킵</span>\n\n    <span class=\"token keyword\">let</span> isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">fetchFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token function\">setToCache</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 캐시에 저장</span>\n          <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isMounted<span class=\"token punctuation\">)</span> <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      isMounted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> fetchFn<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> isLoading <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>React Query를 활용할 때, 필수 인자 중 하나는 <code class=\"language-text\">쿼리 키(queryKey)</code> 입니다.</p>\n<p>쿼리 키를 통해 캐싱되어 있는 데이터와 비교하여, 새로운 데이터를 가져올지, 캐시되어 있는 데이터를 사용할지 결정합니다.</p>\n<ul>\n<li>쿼리 키와 일치하는 캐싱 데이터가 없을 때, 새롭게 해당 키로 데이터를 저장하고</li>\n<li>이미 존재하는 데이터가 있다면, 변질도(out-of-date)를 체크하여 캐싱 데이터 사용 유무를 결정합니다.\n<ul>\n<li>캐시된 데이터를 사용하게 되어 <strong>중복 요청을 줄일 수</strong> 있습니다.</li>\n</ul>\n</li>\n</ul>\n<p>위 cache.js 함수에서는 key:value 의 Map 구조로, Query Key에 value 값이 저장되어 있는지 <strong>체크</strong>, <strong>저장</strong>, <strong>제거</strong>하는 기능을 제공합니다.</p>\n<h3>WIP LIST</h3>\n<ul>\n<li>staleTime 을 통한 out-of-date 여부 결정</li>\n<li>쿼리키 Array 형태로 관리</li>\n<li>refetch 를 시키는 invalidateQuery</li>\n<li>백그라운드 데이터 업데이트</li>\n<li>포커싱, 네트워크 재연결 등… 데이터 자동 리페치</li>\n<li>전역 상태 관리로 변경</li>\n</ul>\n<p>(작업 예정)</p>\n<p>캐싱된 데이터의 변질도는 React Query 가 제공하는 staleTime 옵션으로 <strong>Fresh/Stale</strong> 상태를 결정할 수 있습니다.</p>\n<p>캐시된 데이터가 fresh 하다면 캐싱된 데이터를 사용하고, 만약 데이터가 stale 하다면, 서버에 다시 요청하여 새로운 데이터를 가져옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 중복 요청 방지를 위한 requestTracker.js</span>\n\n<span class=\"token keyword\">const</span> pendingRequests <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">trackRequest</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> promise</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  pendingRequests<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getTrackedRequest</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> pendingRequests<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">clearTrackedRequest</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  pendingRequests<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 패치문에 중복 요청 방지 로직 추가</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  trackRequest<span class=\"token punctuation\">,</span>\n  getTrackedRequest<span class=\"token punctuation\">,</span>\n  clearTrackedRequest<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./requestTracker\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useFetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> fetchFn</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ... 기존 코드 유지</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">const</span> trackedRequest <span class=\"token operator\">=</span> <span class=\"token function\">getTrackedRequest</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trackedRequest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      trackedRequest\n        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>setData<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>setError<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> fetchPromise <span class=\"token operator\">=</span> <span class=\"token function\">fetchFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setToCache</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setIsLoading</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">clearTrackedRequest</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">trackRequest</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> fetchPromise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> fetchFn<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> data<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> isLoading <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>참고자료</p>\n<ul>\n<li><a href=\"https://www.heropy.dev/p/HZaKIE\">react query</a></li>\n</ul>","frontmatter":{"title":"[WIP] No React Query, 나만의 캐싱 라이브러리 만들기","category":"front","date":"December 21, 2024","description":null}},"previous":{"fields":{"slug":"/java-script/2024-10-19-map/"},"frontmatter":{"title":"객체 리터럴을 통해 SOLID 하게 컴포넌트 선언하기"}},"next":{"fields":{"slug":"/front/2025-02-26-remix와next/"},"frontmatter":{"title":"Remix vs Next.js: 멘탈 모델을 통한 비교"}}},"pageContext":{"id":"7f26bb06-88cc-5161-b583-1b053c1146b0","previousPostId":"956dc1f3-fe25-5d71-a583-2323434af5d1","nextPostId":"89a5e110-1447-5133-b04b-90bdf8d91e4e"}},"staticQueryHashes":["2841359383","3274528899"]}