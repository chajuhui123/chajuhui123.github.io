{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/2022-05-31_react-query/","result":{"data":{"site":{"siteMetadata":{"title":""}},"markdownRemark":{"id":"f845757e-e34c-5f23-989d-293f7a996b21","excerpt":"Server-State VS Client-State useQuery 가 반환하는 객체의 프로퍼티로 4가지 상태 중 어떤 상태인지 확인가능하다. fresh : 새롭게 추가된 쿼리 인스턴스 → active로 시작 fetching…","html":"<h2>Server-State VS Client-State</h2>\n<p>useQuery 가 반환하는 객체의 프로퍼티로 4가지 상태 중 어떤 상태인지 확인가능하다.</p>\n<ol>\n<li><strong>fresh</strong> : 새롭게 추가된 쿼리 인스턴스 → active로 시작</li>\n<li><strong>fetching</strong> : 요청을 수행하는 중인 쿼리\n<ul>\n<li>어떻게 리패칭이 될까?\n<ol>\n<li>런타임(랜더링)간 특정 쿼리 인스턴스가 다시 만들어졌을 때</li>\n<li>window가 다시 포스 되어있을 때</li>\n<li>네트워크 다시 연결되었을 때</li>\n<li>refetch interval이 있을 때 :</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><strong>stale</strong> : 인스턴스 존재하지만 패칭 완료된 쿼리. 특정 쿼리가 stale 된 상태에서 같은 쿼리를 useQuery로 호출해 마운트를 시도한다면 캐싱된 데이터가 반환</li>\n<li><strong>inactive</strong> : active가 하나도 없는 쿼리. gc됨. (가비지 콜렉터, 할당된 메모리에서 더 이상 사용하지 않는 메모리를 해체)</li>\n</ol>\n<hr>\n<h2>리액트 쿼리 등장 배경 (For Server State)</h2>\n<ul>\n<li>React 에는 데이터를 패칭하거나 업데이트하는 옵션을 제공하지 않는다. 따라서 React 개발자들은 HTTP 통신 로직을 짜야한다.\n<ul>\n<li>하지만 기존의 API Fetch를 사용하면, 반복되는 패턴, 같은 코드의 반복이 이어지는데 이는 다소 LEGACY 하다.</li>\n</ul>\n</li>\n<li>Redux는 쿠키나 세션같은 클라이언트 state를 관리하기에 적절하다, 하지만 서버 상태에 대해서는 적절하지 못하다.\n<ul>\n<li>서버 데이터는 항상 최신 상태를 보장하지 않는다. Fetching 을 수행해야 최신 데이터로 전환된다.</li>\n<li>네트워크 통신은 최소한으로 줄이는 게 좋다. 하지만 각각의 컴포넌트에서 최신 데이터를 받아오기 위해 fetching을 여러번 수행하는 낭비가 발생할 수 있다.</li>\n</ul>\n</li>\n</ul>\n<aside>\n<h3>❓ Client State</h3>\n<p>React Query는 <strong>전역 state를 “Client”와 “Server”로 분류</strong>해야한다고 주장하며, 각 state는 다른 방식으로 다뤄져야 효율적인 앱을 만들 수 있다고 주장한다.</p>\n<p><strong>Client State</strong> : 세션간 지속적이지 않는 데이터, 동기적, 클라이언트가 소유, 항상 최신 데이터로 업데이트(렌더링에 반영)\n(ex. 리액트 컴포넌트의 state, 동기적으로 저장되는 redux store)</p>\n<p><strong>Server State</strong> : 세션간 지속되는 데이터, 비동기적, 세션을 진행하는 클라이언트만 소유하는게 아니고 공유되는 데이터도 존재하며 여러 클라이언트에 의해 수정될 수 있음, 클라이언트에서는 서버 데이터의 스냅샷만을 사용하기 때문에 클라이언트에서 보이는 서버 데이터는 항상 최신임을 보장할 수 없음\n(ex. 리액트 앱에서는 비동기 요청으로 받아올 수 있는, 백엔드 DB에 저장되어있는 데이터)</p>\n</aside>\n<ul>\n<li>\n<p><strong>useQuery (GET)</strong></p>\n<p>제일 많이 사용</p>\n<p>Query Key</p>\n<p>캐싱할 때 데이터 키를 가지고 있는데,  같은 키를 가지고 있으면</p>\n<p>스트링, 배열 형태로 사용할 수 있다. (?)</p>\n<p>객체 여러 개 써</p>\n<p>보통 쿼리키는 API 주소로 많이 쓴다.</p>\n</li>\n<li>\n<p><strong>Use Mutation (Fetch / POST)</strong></p>\n<p>특정 값만 변경할 수 있다.</p>\n<p>적은 횟수로 호출할 수 있어짐.</p>\n<p>사이드이펙트</p>\n</li>\n</ul>\n<hr>\n<h2>useQueries (GET)</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> status<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> isFetching<span class=\"token punctuation\">,</span> isPreviousData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'projects'</span><span class=\"token punctuation\">,</span> page<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetchProjects</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">keepPreviousData</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">staleTime</span><span class=\"token operator\">:</span> <span class=\"token number\">5000</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> error <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'todos'</span><span class=\"token punctuation\">,</span> todoId<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>somethingGoesWrong<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Oh no!'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> data\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>쿼리는 server date를 요청하는 프로미스를 리턴하는 함수와 함께 <code class=\"language-text\">unique key</code>로 맵핑된다.</p>\n</li>\n<li>\n<p>인자는 2개가 들어간다</p>\n<ul>\n<li>첫 번째 인자 : 쿼리의 unique key (보통 쿼리키는 API 주소로 많이 쓴다.)</li>\n<li>두 번째 인자 : 프로미스를 리턴하는 함수 (resolve Promise를 리턴하거나, error를 throw 해야함)</li>\n</ul>\n</li>\n<li>\n<p>unique key : 한 번 fresh 되었다면, 계속 추적이 가능하다. 리패칭, 캐싱, 공유 등을 할 때 참조되는 값이다.</p>\n<ul>\n<li>주로 배열을 사용하고, 배열의 요소로 <strong><code class=\"language-text\">[쿼리의 이름을 나타내는 문자열, 프로미스를 리턴하는 함수의 인자로 쓰이는 값]</code></strong> 을 넣는다.</li>\n</ul>\n</li>\n<li>\n<p>반환값</p>\n<ul>\n<li><code class=\"language-text\">IsLoading</code> <code class=\"language-text\">isError</code> <code class=\"language-text\">isSuccess</code> <code class=\"language-text\">isldle</code> <code class=\"language-text\">status</code></li>\n<li><code class=\"language-text\">error</code> <code class=\"language-text\">data</code> <code class=\"language-text\">isFetching</code> → 런타임간 요청이 한 번 이상 발생했다면 값이 존재</li>\n</ul>\n</li>\n<li>\n<p>쿼리 요청 함수의 상태를 표현하는 status는 4가지이다.</p>\n<ul>\n<li>status 프로퍼티에서는 문자열로, 상태 이름 앞에 is를 붙인 프로퍼티에서는 불리언으로 해당 상태인지 아닌지를 평가 가능하다. (isIdle === true 등)</li>\n<li>idle : 쿼리 데이터가 하나도 없고 비었을 때. {enabled : false} 상태로 쿼리가 호출되었다면 이 상태로 시작된다.</li>\n<li>loading : 로딩 중</li>\n<li>error : 에러 발생</li>\n<li>success : 요청 성공</li>\n</ul>\n</li>\n<li>\n<p>주요 쿼리 옵션</p>\n<ul>\n<li>\n<p>enabled : True일 때 자동으로 쿼리의 요청 함수가 호출되는 일이 없다</p>\n</li>\n<li>\n<p>keepPreviousData : success와 loading 사이 널뛰기 방지</p>\n</li>\n<li>\n<p>placeholderData : mock 데이터 설정도 가능. 하지만 캐싱이 되지 않는다.</p>\n</li>\n<li>\n<p>initialData : 초기값 설정</p>\n<p>→ 쿼리의 여러가지 옵션 설정을 통해 다양한 방식으로 데이터를 관리할 수 있다.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2>useMutation</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> mutation <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newTodo</span> <span class=\"token operator\">=></span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/todos'</span><span class=\"token punctuation\">,</span> newTodo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>mutation<span class=\"token punctuation\">.</span>isLoading <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token string\">'Adding todo...'</span>\n      <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>mutation<span class=\"token punctuation\">.</span>isError <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">An error occurred: </span><span class=\"token punctuation\">{</span>mutation<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\n          </span><span class=\"token punctuation\">{</span>mutation<span class=\"token punctuation\">.</span>isSuccess <span class=\"token operator\">?</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Todo added!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span>\n            <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n              mutation<span class=\"token punctuation\">.</span><span class=\"token function\">mutate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Do Laundry'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n          <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            Create Todo\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>userQuery와 다르게 create, update, delete 하며, server state에 사이드 이펙트를 일으키는 경우 사용한다.</p>\n</li>\n<li>\n<p>mutation 객체를 정의하고, mutate 메서드를 사용하면 요청 함수를 호출해 요청이 보내진다. 이것이 query랑 mutation이 나눠져있는 이유인 것 같다.</p>\n<p>→ 이벤트 핸들러 함수, 조건부로 useQuery를 호출하면 최상위에서 호출해야한다는 훅의 규칙에 위배되기 때문에 성가시다.</p>\n</li>\n<li>\n<p>useMutation이 반환하는 객체 프로퍼티로 제공되는 상태값은 useQuery와 동일하다</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">seMutation</span><span class=\"token punctuation\">(</span>addTodo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">onMutate</span><span class=\"token operator\">:</span> <span class=\"token parameter\">variables</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 뮤테이션 시작</span>\n    <span class=\"token comment\">// onMutate가 리턴하는 객체는 이하 생명주기에서 context 파라미터로 참조가 가능하다.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span> variables<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 에러가 났음</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">rolling back optimistic update with id </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>context<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onSuccess</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> variables<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 성공</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">onSettled</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> variables<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 성공이든 에러든 어쨌든 끝났을 때</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>두 번째 인자로 콜백 객체를 넘겨줘서, <strong>라이프사이클 인터셉트 로직</strong>을 짤 수 있다.</li>\n<li>retry 옵션 또한 부여할 수 있다</li>\n</ul>","frontmatter":{"title":"[React Query] React Query 정리하기","category":"ReactQuery","date":"May 31, 2022","description":null}},"previous":{"fields":{"slug":"/java-script/2022-05-30_if-else-in-JS/"},"frontmatter":{"title":"JS에서 if - else if - else 문을 지양해야하는 이유"}},"next":{"fields":{"slug":"/react/2022-06-14_react-portal/"},"frontmatter":{"title":"Modal 구현 제대로 알기! root에 등장하는 Modal Portal 구현"}}},"pageContext":{"id":"f845757e-e34c-5f23-989d-293f7a996b21","previousPostId":"798bfae3-1e07-59f7-a3f3-404b7131e478","nextPostId":"7d69a0e3-f757-50bc-9425-a36edb9fffbb"}},"staticQueryHashes":["2841359383","3274528899"]}