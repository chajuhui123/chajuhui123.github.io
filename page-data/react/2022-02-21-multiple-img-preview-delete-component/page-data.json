{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/2022-02-21-multiple-img-preview-delete-component/","result":{"data":{"site":{"siteMetadata":{"title":""}},"markdownRemark":{"id":"05b34b64-17f6-5bab-b218-8eeb9d4402f6","excerpt":"input 태그에 파일이 첨부될 때(onChange)의 event 를 찍어보았다. 다중업로드?  처럼 속성값을 넣어주면, 다중 파일 업로드가 가능해진다. Files 내부에 파일을 Object 형태로 받아오고 있다. 미리보기 기능을 구현하기 위해선 이미지 DOM…","html":"<p>input 태그에 파일이 첨부될 때(onChange)의 event 를 찍어보았다.</p>\n<p>다중업로드?</p>\n<p><code class=\"language-text\">&lt;input type=\"file\" multiple /></code> 처럼 속성값을 넣어주면, 다중 파일 업로드가 가능해진다.</p>\n<p>Files 내부에 파일을 Object 형태로 받아오고 있다.</p>\n<p>미리보기 기능을 구현하기 위해선 이미지 DOM이 필요한데, 이것은 <code class=\"language-text\">URL.createObjectUrl()</code> 메서드를 활용하여 반환받을 수 있다. 위에서 받아온 파일 Object 각각을 <code class=\"language-text\">URL.createObjectUrl()</code> 의 매개변수로 넣어주면 주어진 객체를 가리키는 URL을 DOMString 으로 반환받을 수 있다. 이 때 매개변수로 넣어주는 Object는 File, Blob, MediaSource 형태여야 한다.</p>\n<p>참고 : <a href=\"https://developer.mozilla.org/ko/docs/Web/API/URL/createObjectURL\">MDN Web Docs : URL.createObjectURL()</a></p>\n<p>위에서 얻은 DOMString을 <code class=\"language-text\">&lt;img> src</code> 속성에 대입해준다면 미리보기 이미지를 구현할 수 있다.</p>\n<hr>\n<h2>요약</h2>\n<p>1️⃣ <code class=\"language-text\">&lt;input></code> 대신 <code class=\"language-text\">&lt;label></code> 을 사용하여, 이미지 첨부 UI를 디자인한다. <code class=\"language-text\">&lt;input></code>은 <code class=\"language-text\">display : none</code> 으로 숨긴다.</p>\n<p>2️⃣ <code class=\"language-text\">&lt;input></code> 에 <code class=\"language-text\">onChange</code> 이벤트를 등록한다.</p>\n<p>3️⃣ onChange 이벤트에 첨부된 파일을 <code class=\"language-text\">DOMString 으로 반환</code>해주는 함수를 대입한다.</p>\n<p>4️⃣  반환받은 DOMString은 <code class=\"language-text\">배열 형태의 State</code> 로 관리한다.</p>\n<p>5️⃣  첨부된 이미지 DOMString을 담고 있는 배열 State를 순환하여 미리보기 <code class=\"language-text\">이미지 컴포넌트를 렌더링</code>해준다.</p>\n<hr>\n<h3>State 선언</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>previewImgList<span class=\"token punctuation\">,</span> setPreviewImgList<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>미리보기 이미지 객체들을 관리할 배열 형태의 State를 선언한다.</li>\n</ul>\n<h3>미리보기 이미지 DOMString 저장</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleCreatePreviewImg</span> <span class=\"token operator\">=</span> event <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">let</span> previewUrlList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>previewImgList<span class=\"token punctuation\">]</span>\r\n  <span class=\"token keyword\">const</span> uploadFilesObject <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>files\r\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> uploadFilesObject<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">const</span> currentImgUrl <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span>uploadFilesObject<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\r\n    previewUrlList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>currentImgUrl<span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token comment\">// 이미지 최대 5개 제한</span>\r\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>previewUrlList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n    previewUrlList <span class=\"token operator\">=</span> previewUrlList<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n  <span class=\"token function\">setPreviewImgList</span><span class=\"token punctuation\">(</span>previewUrlList<span class=\"token punctuation\">)</span>\r\n  <span class=\"token comment\">// (+ 개발 중인 프로젝트에 따라 서버에 저장하기 위한 코드를 추가할 수 있음.)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">onChange</code> 이벤트에 넣어줄 함수이다.</li>\n<li>첨부 파일이 들어올 때, 들어온 파일들을 DOMString 형태로 반환하여 준다. 반환된 파일은 관리하고 있는 state에 추가시킨다.</li>\n<li>이미지는 최대 5개 첨부할 수 있도록, 배열을 자르는 방식으로 제한하였다.</li>\n</ul>\n<h3>미리보기 이미지 삭제</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleDeleteImage</span> <span class=\"token operator\">=</span> id <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">const</span> filteredImgList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\r\n  <span class=\"token punctuation\">;</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>previewImgList<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">,</span> imgIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>id <span class=\"token operator\">!==</span> imgIndex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\r\n      filteredImgList<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\r\n      <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">revokeObjectURL</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">}</span>\r\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token function\">setPreviewImgList</span><span class=\"token punctuation\">(</span>filteredImgList<span class=\"token punctuation\">)</span>\r\n  <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">'urls'</span><span class=\"token punctuation\">,</span> filteredImgList<span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>handleDeleteImage는 삭제하고자 하는 이미지 컴포넌트 위 <code class=\"language-text\">X</code> 버튼을 onClick 하면 작동하는 함수이다.</li>\n<li>미리보기 DOMString 값이 저장된 배열을 순환하며, 현재 누른 컴포넌트의 id값과 미리보기 이미지의 id값이 일치하지 않으면 (삭제하고자하는 컴포넌트가 아닌 경우), 배열에 포함한다.</li>\n<li>만약 일치한다면 (삭제하고자하는 컴포넌트인 경우), 배열에 포함하지 않으며 <code class=\"language-text\">URL.revokeObjectURL</code> 를 통해 URL 객체를 제거한다.\r\n→ <a href=\"https://developer.mozilla.org/ko/docs/Web/API/URL/createObjectURL\">MDN</a>에서 <strong>최적의 성능과 메모리 사용량</strong>을 위해서 권장하고 있는 방식이다.</li>\n</ul>\n<h3>주요 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token operator\">...</span>\r\n<span class=\"token keyword\">const</span> UploadPreviewImage<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>TProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n  <span class=\"token operator\">...</span>\r\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StyledWrapper</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>photo-input-preview-box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>photo-wrap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n          **</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">htmlFor</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>uploadFile<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">사진 업로드</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">**\r\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n        **</span><span class=\"token punctuation\">{</span>previewImgList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>previewImg<span class=\"token punctuation\">,</span> previewImgIdx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\r\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\r\n            <span class=\"token operator\">&lt;</span>ReviewPreviewPhoto\r\n              key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>previewImgIdx<span class=\"token punctuation\">}</span>\r\n              id<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>previewImgIdx<span class=\"token punctuation\">}</span>\r\n              imgSrc<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>previewImg<span class=\"token punctuation\">}</span>\r\n              handleDeleteImage<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleDeleteImage<span class=\"token punctuation\">}</span><span class=\"token operator\">**</span>\r\n\t\t\t\t\t\t\t<span class=\"token comment\">// (+ 진행 중인 프로젝트에 따라 option 추가 가능)</span>\r\n            <span class=\"token operator\">**</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\r\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">**\r\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\r\n      **&lt;input\r\n        type=\"file\"\r\n        multiple\r\n        id=\"uploadFile\"\r\n        accept=\"image/*\"\r\n        style=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> display<span class=\"token operator\">:</span> <span class=\"token string\">'none'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\r\n        onChange=</span><span class=\"token punctuation\">{</span>handleCreatePreviewImg<span class=\"token punctuation\">}</span><span class=\"token plain-text\">**\r\n\t\t\t\t// (+ 진행 중인 프로젝트에 따라 option 추가 가능)\r\n      **/>**\r\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">StyledWrapper</span></span><span class=\"token punctuation\">></span></span>\r\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> UploadPreviewImage<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>input 대신 label 태그를 사용해 input UI를 디자인한다.</li>\n<li>previewImgList (= DOMString을 담고 있는 배열)을 순환하며 이미지를 랜더링한다.</li>\n<li>이미지에 <code class=\"language-text\">handleDeleteImage</code> 함수를 props 로 넘겨줘, 컴포넌트 위에 X 버튼을 두고, X를 눌렀을 때 해당 함수가 작동하도록 한다.</li>\n</ul>","frontmatter":{"title":"[React] 다중 첨부 이미지 미리보기 및 제거 컴포넌트","category":"React","date":"February 21, 2022","description":null}},"previous":{"fields":{"slug":"/next-js/2022-01-22-post/"},"frontmatter":{"title":"[NextJS] 라우터 쿼리 값 가져오기"}},"next":{"fields":{"slug":"/java-script/2022-03-24-es6/"},"frontmatter":{"title":"JavaScript의 역사와 함께 알아보는, ES6의 등장"}}},"pageContext":{"id":"05b34b64-17f6-5bab-b218-8eeb9d4402f6","previousPostId":"fe5773f3-3bff-57b1-97e0-468478621143","nextPostId":"d8bba543-475c-53b9-986e-5150c962782f"}},"staticQueryHashes":["2841359383","3274528899"]}