{"componentChunkName":"component---src-templates-blog-post-js","path":"/react/2023-05-15-Blob/","result":{"data":{"site":{"siteMetadata":{"title":""}},"markdownRemark":{"id":"f71a3684-2b80-569f-8431-cd8f465ceea7","excerpt":"진행 중인 프로젝트에서 사용자 권한과 요청에 맞게 파일 다운로드 기능을 제공해야했는데요. 대게 다운로드 기능을 제공해야하는 파일들은 이며, JavaScript에서는 바이너리 데이터를 다루는 방법으로 와 를 제공하고 있습니다. Buffer…","html":"<p>진행 중인 프로젝트에서 사용자 권한과 요청에 맞게 파일 다운로드 기능을 제공해야했는데요.</p>\n<p>대게 다운로드 기능을 제공해야하는 파일들은 <code class=\"language-text\">바이너리 데이터</code>이며,</p>\n<p>JavaScript에서는 바이너리 데이터를 다루는 방법으로 <code class=\"language-text\">Buffer</code>와 <code class=\"language-text\">FileAPI</code>를 제공하고 있습니다.</p>\n<ul>\n<li><strong>Buffer</strong>: 개발자가 메모리 관점에서 바이너리 데이터를 다룰 수 있습니다.</li>\n<li><strong>File API</strong>: 파일(png, mp3등)이나 입출력장치(마이크, 카메라, 화면 등)의 바이너리 데이터를 다룰 수 있습니다.</li>\n</ul>\n<p>해당 포스팅에서는 FileAPI에 대해 정리 후,</p>\n<p>FileAPI 중 하나인 Blob 객체를 활용한 서버 데이터 다운로드 React 예제를 정리했습니다.</p>\n<hr>\n<h2><strong>FILE API 란?</strong></h2>\n<p><code class=\"language-text\">FILE API</code>란 <strong>텍스트, 이미지, 오디오, 비디오 등</strong>의 대용량 바이너리 데이터를 다루기 위한 API입니다.</p>\n<p>구체적으로 File API는 <code class=\"language-text\">Blob</code>, <code class=\"language-text\">File</code>, <code class=\"language-text\">FileReader</code>, <code class=\"language-text\">FileList</code> 객체로 구성되어 있습니다.</p>\n<ul>\n<li><strong>Blob:</strong> 바이너리 데이터를 나타내는 불변 객체로, 이미지나 다운로드된 파일들을 처리합니다.</li>\n<li><strong>File:</strong> Blob을 상속 받는 객체로 사용자 시스템에서 가져온 파일을 나타냅니다. 주로 <code class=\"language-text\">&lt;input type=\"file\"></code> 요소를 통해 얻어진 파일을 나타내곤 합니다.</li>\n<li><strong>FileReader:</strong> File이나 Blob에 저장된 바이너리 데이터를 읽어들이는 객체입니다. 데이터를 텍스트, 이진 데이터 또는 URL로 액세스할 수 있게 합니다.</li>\n<li><strong>FileList:</strong> HTML Input 엘리먼트를 통해 입력 받은 파일(File객체 형태)들을 저장하는 유사 배열 객체입니다. <code class=\"language-text\">&lt;input type=\"file\" multiple></code>을 사용하여 여러 파일을 선택할 때 얻어집니다.</li>\n</ul>\n<hr>\n<h1>Blob (Binary Large Object)</h1>\n<p>JS에서 Blob은 이미지, 사운드, 비디오와 같은 멀티미디어 데이터를 다룰 때 사용할 수 있습니다.</p>\n<p>대개 <strong>데이터의 크기(Byte)</strong> 및 <strong>MIME 타입</strong>을 알아내거나, <strong>데이터를 송수신을 위한 작은 Blob 객체로 나누</strong>는 등의 작업에 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> testBlob <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>Blob 은 Bolb 생성자 함수를 사용하여 Blob 객체를 생성합니다.</li>\n<li>array와 options를 인자로 받습니다.\n<ul>\n<li>options 에는 type, endings 를 설정할 수 있습니다.</li>\n<li>type : 데이터의 <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\">MIME 타입</a>을 설정, 기본 값은 “” 입니다.</li>\n<li>endings : <code class=\"language-text\">\\n</code>을 포함하는 문자열 처리를 <code class=\"language-text\">transparent</code> 혹은 <code class=\"language-text\">native</code>로 지정, 기본값은 <code class=\"language-text\">transparent</code> 입니다</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1>React 에서 Blob 객체로 파일 다운로드 기능 구현 (With. REST API)</h1>\n<ul>\n<li>프론트 사용 스택 : <code class=\"language-text\">React</code>, <code class=\"language-text\">JavaScript</code>, <code class=\"language-text\">React-Query</code>, <code class=\"language-text\">Axios</code> …\n<ul>\n<li>백엔드에서는 Flask 로 REST API 를 설계하였으나, 해당 정리 내용에서는 프론트에 초점을 맞춰 정리하였습니다.</li>\n<li>다운로드 기능 구현에 해당하는 코드만 정리하였습니다. 이 외의 코드는 <code class=\"language-text\">...</code> 으로 처리하였습니다.</li>\n</ul>\n</li>\n</ul>\n<p>프로젝트에서 다운로드 기능으로 제공하고자 한 파일들은 프로젝트 백엔드 서버 특정 경로에 함께 저장이 되어 있었습니다.</p>\n<p>또한 백엔드 스택인 Flask 에서 <code class=\"language-text\">send_file</code> 이라는 메서드를 제공하였기 때문에, 백 서버 특정 경로에 저장되어 있는 파일을 압축하여, 클라이언트 서버로 보내기에 적절하였습니다.</p>\n<p>따라서 REST API 형태로 파일 다운로드 하고자하는 파일을 보낼 수 있다는 것을 확인하였고, 작업을 진행하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> Api <span class=\"token keyword\">from</span> <span class=\"token string\">'../../modules/lib/customApi'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchFileDownload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Api<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/download-zip'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">responseType</span><span class=\"token operator\">:</span> <span class=\"token string\">'blob'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 파일 다운로드를 위해 blob 유형으로 설정</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> filename <span class=\"token operator\">=</span> <span class=\"token string\">\"DUMMY\"</span> <span class=\"token comment\">// 컨벤션에 맞는 파일명으로 설정하기</span>\n\n  <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">createObjectURL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Blob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>response<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> link <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  link<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span>\n  link<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'download'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>filename<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.zip</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  link<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  link<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">,</span> fetchFileDownload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>API 서버에서 blob type의 zip 파일을 받아옵니다. 여기서 <code class=\"language-text\">Api</code>는 진행 중인 프로젝트에서 사용하고 있는 커스텀된 Axios 인터셉터인데요.</p>\n<p>기본적으로 요청 실패에 대한 catch 처리가 되어 있습니다. (서버 에러 메시지 토스트 or 지정된 오류 메시지 토스트 노출) 또한 세부적으로는 응답값에 대한 오류 처리가 case 별로 나눠져 있습니다. (ex. 인증 관련 오류시, 재로그인 유도 모달 노출 등)</p>\n<p>요청 성공시에는 서버 response 에 대한 data 값을 받아오는 방식으로 셋팅이 되어 있습니다. (<code class=\"language-text\">response.data</code>)</p>\n<p>받아 온 데이터를 JS Blob 객체 형태로 만든 후, a 태그의 download 속성을 활용하여 다운로드 로직을 작성하였습니다.</p>\n<ul>\n<li>코드 설명\n<ul>\n<li><code class=\"language-text\">window.URL.createObjectURL(new Blob([response]))</code> : Blob 객체 생성</li>\n<li>a 태그의 href 의 기능을 활용하여, 해당 로직 안에서 a 태그를 클릭하였을 때 link 로직을 동작시키기. Vanila JS 방식으로 구현하였습니다</li>\n<li>a element를 생성하고 → 해당 element에 위에서 생성한 Blob 객체를 href에 심음 → download 속성에 filename.zip 을 등록 → body 에 element를 추가한 후, click으로 동작 → 동작을 마친 link는 제거</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">mutate</span><span class=\"token operator\">:</span> mutateKeyDownload<span class=\"token punctuation\">,</span> isLoading <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span>\n    <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span>fetchGetDownloadKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Modal</span></span>\n  <span class=\"token attr-name\">okText</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>다운로드<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">onOk</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>mutateKeyDownload<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">okButtonProps</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">loading</span><span class=\"token operator\">:</span> isLoading<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">backgroundColor</span><span class=\"token operator\">:</span> token<span class=\"token punctuation\">.</span>colorPrimary <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>다음으로는 다운로드 버튼이 있는 화면에서 mutate 문을 셋팅해주었습니다.</p>\n<p><code class=\"language-text\">react-query</code> 라이브러리를 활용하고 있기에, POST API 연동시 <code class=\"language-text\">useMutation</code> 을 활용할 수 있었고, 미리 셋팅해둔 axios fetch 문을 인자 값으로 넣어줍니다.</p>\n<ul>\n<li>(추가) REST API 참고</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/download-zip'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">download_zip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># zip 파일 생성</span>\n    zip_filename <span class=\"token operator\">=</span> <span class=\"token string\">'archive.zip'</span>\n\n    file1_path <span class=\"token operator\">=</span> <span class=\"token string\">'/path/to/file1.txt'</span>  <span class=\"token comment\"># zip에 담을 파일 경로 1</span>\n    file2_path <span class=\"token operator\">=</span> <span class=\"token string\">'/path/to/file2.txt'</span>  <span class=\"token comment\"># zip에 담을 파일 경로 2</span>\n\n    <span class=\"token keyword\">with</span> zipfile<span class=\"token punctuation\">.</span>ZipFile<span class=\"token punctuation\">(</span>zip_filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> zip_file<span class=\"token punctuation\">:</span>\n        zip_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>file1_path<span class=\"token punctuation\">,</span> <span class=\"token string\">'file1.txt'</span><span class=\"token punctuation\">)</span>\n        zip_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>file2_path<span class=\"token punctuation\">,</span> <span class=\"token string\">'file2.txt'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> send_file<span class=\"token punctuation\">(</span>zip_filename<span class=\"token punctuation\">,</span> as_attachment<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># flask 의 sned_file 메서드 활용</span></code></pre></div>\n<p>추가로 REST API 의 간단한 예제입니다. 실제 프로젝트에서는 DB 서버 에 저장된 파일을 다루기 때문에 프로덕션 코드와 다릅니다!</p>\n<hr>\n<h3>참고</h3>\n<p><a href=\"https://curryyou.tistory.com/442\">자바스크립트 File API 파헤치기: Blob, File, FileReader, FileList, BlobURL</a></p>\n<p><a href=\"https://heropy.blog/2019/02/28/blob/\">Blob(블랍) 이해하기</a></p>","frontmatter":{"title":"파일 다운로드 기능 개발기 (with. React)","category":"React","date":"May 15, 2023","description":null}},"previous":{"fields":{"slug":"/infra/2023-05-06-infra/"},"frontmatter":{"title":"인프라 관련 지식 '총' 정리"}},"next":{"fields":{"slug":"/cs/2023-11-08-js-sort/"},"frontmatter":{"title":"JavaScript의 sort 메서드 알고리즘 파헤치기"}}},"pageContext":{"id":"f71a3684-2b80-569f-8431-cd8f465ceea7","previousPostId":"aa6c1ba4-ff47-53dd-8793-acfaf787b35c","nextPostId":"5e40e662-30d3-52ef-9fc1-72233d1bd00c"}},"staticQueryHashes":["2841359383","3274528899"]}