{"componentChunkName":"component---src-templates-blog-post-js","path":"/infra/2022-11-17-vault/","result":{"data":{"site":{"siteMetadata":{"title":""}},"markdownRemark":{"id":"a7215cf0-30a6-574e-abe0-b16d6a4612f0","excerpt":"오늘 새롭게 알게 된 기술은 Vault by HashiCorp 인데요. 요즘 ‘좀 더 안전한 개발 방식’을 고민하고 있는 저에게 매우 흥미롭게 다가온 기술입니다. 공식 문서는 https://www.vaultproject.io/ 요기! 사전적 의미로 살펴보는 Vault Vault…","html":"<p>오늘 새롭게 알게 된 기술은 <strong>Vault by HashiCorp</strong> 인데요.</p>\n<p>요즘 ‘좀 더 안전한 개발 방식’을 고민하고 있는 저에게 매우 흥미롭게 다가온 기술입니다.</p>\n<p>공식 문서는 <a href=\"https://www.vaultproject.io/\">https://www.vaultproject.io/</a> 요기!</p>\n<h2>사전적 의미로 살펴보는 Vault</h2>\n<p>Vault 의 사전적 의미를 우선 살펴보면 금고보다 훨씬 큰 지하실 금고방! (영화 속에 볼 수 있는 대형 금고 방) 을 의미한다고 해요. 단어의 뜻만 살펴 봐도 뭔가 아무도 닿을 수 없는 깊숙한 곳에 우리의 소중한 정보를 저장해둘 수 있을 것 같다는 직감이 드는데요.</p>\n<p>Vault by HashiCorp 또한 민감한 데이터를 보호하기 위해 토큰, 암호, 인증서, 암호화 키에 대한 액세스를 보호, 저장 및 엄격하게 제어하는 기술이에요!</p>\n<h2>언제 적용할 수 있을까요?</h2>\n<p>결론적으로 Vault는 <strong>비밀 정보 즉, 공개되면 안 되는 비밀번호, API 키, 토큰 등을 저장하고 관리하는 도구</strong>입니다. 개발을 하다보면 노출되어서는 안되는 데이터값들이 있어요. 예를 들면 DB의 계정명, 비밀번호, 비밀키 등… 이 있습니다.</p>\n<p>사실 개인 프로젝트때는 이것들을 하드코딩해서 집어넣거나, 조금 신경쓰더라도 개인적인 config 파일로 관리하거나, 서버 환경에서 환경 변수를 활용하는 등 가볍게 관리를 하였어요. 하지만 이는 프로젝트의 규모가 커진다면? 관리 하기 어려워질 것이에요.</p>\n<p>(예를 들어, 환경 변수가 각자의 local 에 저장되어 있는데 수정 사항이 생긴다면? 모든 프로젝트 참여자가 개인적으로 수정해야하는 상황…)</p>\n<p>더불어 현업에서는 정보가 곧 자산이고, 최대한 사용자가 믿을 수 있는 안전한 서비스를 만드는 것이 개발자의 목표가 될 것이에요.</p>\n<h2>핵심 개념</h2>\n<ul>\n<li>TIP : Vault를 사용시, 기능을 확장할 수 있는데 이를 <code class=\"language-text\">백엔드(Backend)</code>라고 통칭해서 부른다고 합니다.</li>\n</ul>\n<h3><a href=\"https://developer.hashicorp.com/vault/docs/configuration#backend\">Storage Backend</a></h3>\n<p><code class=\"language-text\">Storage Backend</code>는 Secret이 실제로 저장될 저장소입니다.</p>\n<p>Vault의 정보(secret 등)를 저장하면 Vault가 이를 실제 저장소에 저장해야하는데요. <code class=\"language-text\">Storage Backend</code>는 Secret이 실제로 저장될 저장소입니다.</p>\n<p>저장소는 Consul, DynamoDB, S3, Google Cloud Storage, Azure, MySQL, PostgreSQL 다양한 백엔드를 지원하고 있습니다.</p>\n<h3><a href=\"https://developer.hashicorp.com/vault/docs/secrets\">Secret Backend</a></h3>\n<p><code class=\"language-text\">Secret Backend</code>는 Secret 이 저장될 저장방식을 의미합니다.</p>\n<p>다양한 저장방식을 지원하고 있는데, <a href=\"https://developer.hashicorp.com/vault/docs/secrets/kv\">KV(key-value)</a> 방식이 가장 간편하고 단순합니다.</p>\n<p>Vault가 제공하는 KV 방식은 Object의 Key-Value의 개념과 같습니다.</p>\n<p><a href=\"https://developer.hashicorp.com/vault/docs/secrets/transit\">Transit</a> 은 암호화/복호화 기능을 제공하는 저장방식입니다.</p>\n<h3><a href=\"https://developer.hashicorp.com/vault/docs/auth\">Auth Backend</a></h3>\n<p><code class=\"language-text\">Auth Backend</code>는 Vault에 저장된 Secret을 받아오기 위한 인증방식입니다.</p>\n<p>대표적으로 Id/Password 를 통해 인증하는 방식이 존재합니다. LDAP이나 GitHub 등을 연결할 수 있습니다.</p>\n<p>AppToken, AppRole 이라는 인증 방식이 있으며 해당 기능을 통해, client token 을 발급받고 vault 서버와 통신합니다. 이 토큰 인증 방식은 필요에 따라 사람이나 애플리케이션 등에서 사용하도록 만들 수 있습니다.</p>\n<p>AppRole은 RoldeId/SecretId 를 통해 임시 Token 을 요청하고 임시 Token 으로 Secret 을 받아옵니다.</p>\n<hr>\n<p>이번 기회에 민감한 데이터를 좀 더 안전하게 관리할 수 있는 방식에 대해 고민해볼 수 있었어요. 이번 기회에 Vault의 개념과 사용법에 대해 좀 더 공부해볼 것입니다 :D</p>","frontmatter":{"title":"민감한 정보는 저 깊은 곳으로 Vault by HashiCorp","category":"infra","date":"November 17, 2022","description":null}},"previous":{"fields":{"slug":"/next-js/2022-10-28-next-js-13/"},"frontmatter":{"title":"두둥...! Next.js 13 신버전 발표회 훑어보기"}},"next":{"fields":{"slug":"/infra/2023-03-23-LDAP/"},"frontmatter":{"title":"중앙관리 및 검색에 최적화된 디렉터리 서비스 'LDAP'"}}},"pageContext":{"id":"a7215cf0-30a6-574e-abe0-b16d6a4612f0","previousPostId":"0bf8ae1a-ea65-5516-98e7-e0e05a009758","nextPostId":"0c7f7179-8742-5e94-a0a1-d0d180077e41"}},"staticQueryHashes":["2841359383","3274528899"]}